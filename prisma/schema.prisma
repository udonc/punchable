// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// ユーザー
model User {
  id                      String        @id @default(cuid()) /// ID
  createdAt               DateTime      @default(now()) /// 作成日時
  updatedAt               DateTime      @updatedAt /// 更新日時
  isArchived              Boolean       @default(false) /// アーカイブされたかどうか
  name                    String /// Human-readable なユーザーの名前 (フルネーム, または名字のみなど、任意)
  slug                    String        @unique /// URL に使われるユーザーの名前
  ip                      String        @unique /// ユーザーが使用する IP アドレス
  canAccessTimecard       Boolean       @default(false) /// タイムカードにアクセスできるかどうか
  canAccessUserManagement Boolean       @default(false) /// ユーザー管理にアクセスできるかどうか
  Attendance              Attendance[] /// ユーザーの出勤情報
  ReviewAsReviewer        Review[]      @relation(name: "reviewer") /// このユーザーがレビュアーとして関連付けられたレビュー
  ReviewAsReviewee        Review[]      @relation(name: "reviewee") /// このユーザーがレビュイーとして関連付けられたレビュー
  UserOrder               UserOrder[]
  Report                  Report[]
  MidTermGoal             MidTermGoal[]
}

/// ユーザーの並び順
model UserOrder {
  id        String   @id @default(cuid()) /// ID
  createdAt DateTime @default(now()) /// 作成日時
  updatedAt DateTime @updatedAt /// 更新日時
  key       String /// 並び替えのキー (打刻画面: "timecard", レビュー画面: "review")
  user      User     @relation(fields: [userId], references: [id]) /// この並び順に紐づくユーザー
  userId    String /// この並び順に紐づくユーザーの ID
  order     Int /// 並び順

  @@unique([userId, key])
}

/// レポート
model Report {
  id        String   @id @default(cuid()) /// ID
  createdAt DateTime @default(now()) /// 作成日時
  updatedAt DateTime @updatedAt /// 更新日時
  isDraft   Boolean  @default(false) /// 下書きかどうか
  task      String /// 作業内容 (Markdown)
  progress  String /// 進捗 (Markdown)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) /// このレポートに紐づくユーザー
  userId    String /// このレポートに紐づくユーザーの ID
}

/// 中期目標
model MidTermGoal {
  id        String   @id @default(cuid()) /// ID
  createdAt DateTime @default(now()) /// 作成日時
  updatedAt DateTime @updatedAt /// 更新日時
  body      String /// 本文 (Plain text)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) /// この中期目標に紐づくユーザー
  userId    String /// この中期目標に紐づくユーザーの ID
}

model Review {
  id         String @id @default(cuid()) /// ID
  reviewer   User   @relation(name: "reviewer", fields: [reviewerId], references: [id], onDelete: Cascade) /// レビュアー
  reviewerId String /// レビュアーの ID
  reviewee   User   @relation(name: "reviewee", fields: [revieweeId], references: [id], onDelete: Cascade) /// レビュイー
  revieweeId String /// レビュイーの ID

  @@unique([reviewerId, revieweeId])
}

/// 出勤情報
model Attendance {
  id        String   @id @default(cuid()) /// ID
  createdAt DateTime @default(now()) /// 作成日時
  updatedAt DateTime @updatedAt /// 更新日時
  date      DateTime /// 日付
  type      String /// 種類 (出勤: "attend", 欠席: "absent", その他: "other")
  note      String? /// メモ
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade) /// このタイムカードに紐づくユーザー
  userId    String /// このタイムカードに紐づくユーザーの ID
}
